

// Uses Files to store High Score.

// Including the required header files to use library functions.

#include<stdio.h>
#include<graphics.h>
#include<dos.h>
#include<conio.h>
#include<stdlib.h>

/*
	*-- Global Variables   --*
*/

/*  Global vaiables are declared here accessible within any functions.
    Changing their value locally within a function doesn't change this value assigned globally.
*/

int repeat = 1; // Prevents the Main Menu animation by changing the value locally when any other key other than the required one is being pressed.

/*
	*-- Methods  --*
*/

// Functions representing various phases of the game.

// Instructions Window.

void instructions()
{
  cleardevice();
}

// Retrieves and shows the current High Score.

void showHighScore()
{
  cleardevice();
}

// Sets new High Score.

void setHighScore()
{
  cleardevice();
}

// Game Play Mechanism.

void game_play()
{
  int i, speed = 5, k = 5, x, crashed = 0, random_color = 1, random_style = 1, basket_x = getmaxx()/2-80, basket_y = getmaxy()/2+80, egg_x = 50, egg_y = 45, pos = 0;
  char key;

  setcolor(WHITE);

  // Boundary

/*  line(0, 30, getmaxx(), 30);
  line(getmaxx(), 30, getmaxx(), getmaxy()/2+170);
  line(0, 30, 0, getmaxy()/2+170);
  //sector(basket_x, basket_y, 180, 360, 90, 90);
  line(0, getmaxy()/2+170, getmaxx(), getmaxy()/2+170); */

  rectangle(0, 0, getmaxx(), getmaxy());

  // Main Game Loop.

   while(crashed == 0)
  {

  setfillstyle(random_style, random_color);

  fillellipse(egg_x, egg_y, 30, 45);

  line(0, 30, getmaxx(), 30);
  line(getmaxx(), 30, getmaxx(), getmaxy()/2+170);
  line(0, 30, 0, getmaxy()/2+170);
  line(0, getmaxy()/2+170, getmaxx(), getmaxy()/2+170);

	if(kbhit())
       {
	switch(getch())
	{
	  case 'a':
		pos -= k;
		break;
	  case 'd':
		 pos += k;
		 break;
	  default:
		 crashed=1;
	}
       }

      x = basket_x + pos*2;

     // Restricting the basket within the space.

     if(x <= 90)
     {
       x = 90;
     }

     else if(x >= getmaxx()-90)
     {
       x = getmaxx() - 90;
     }
     setfillstyle(6, BROWN);

     sector(x, basket_y, 180, 360, 90, 90);

     //Checking whether the egg falls within the basket.

     if(egg_x + 60 >= x && egg_x - 90 <= x + 30 && egg_y + 45 >= basket_y && egg_y - 45 <= basket_y + 90)
     {
	outtextxy(50, 80, "Crashed");
	delay(1000);
	crashed = 1;
     }

     egg_y += speed;

     // Placing egg to the initial position after crossing the border.

     if(egg_y >= getmaxy() - 90)
     {
	egg_x = random(getmaxx() - 30);

	if(egg_x <= 30)
	{
	  egg_x += 30;
	}

	egg_y = 45;

	if(speed >= 25)
	{
	  speed = 25;
	}
	else
	{
	  speed += 1;
	}

	if(k <= 10)
	{
	  k += 1;
	}
	else
	{
	  k = 10;
	}

	random_color = random(15);
	random_style = random(12);

     }

     delay(40);
    cleardevice();
     }
  }

// Main Menu as the name suggests.

void main_menu()
{
     char option;

     int i;

     cleardevice();

     setcolor(WHITE);


  settextstyle(4, 0, 7);



  if(repeat == 1)
  {
  for(i=getmaxy()+30; i>=20; i--)
  {
  outtextxy(getmaxx()/2 - 160, i, "Main Menu");
  delay(1);
  cleardevice();
  }
  }

  // Boundary.

  rectangle(0, 0, getmaxx(), getmaxy());

  outtextxy(getmaxx()/2 - 160, 20, "Main Menu");

  settextstyle(7, 0, 4);

  outtextxy(30, getmaxy()/2 - 100, "1. Play Now");

  outtextxy(30, getmaxy()/2 - 40, "2. Instructions");

  outtextxy(30, getmaxy()/2 + 20, "3. High Score");

  outtextxy(30, getmaxy()/2 + 80, "Enter your option:");

  option = getche();

  switch(option)
  {

    case '1':

	 game_play();
	 break;

    case '2':

	 instructions();
	 break;

    case '3':

	 showHighScore();
	 break;

    default:

	 settextstyle(8, 0, 5);

	 setfillstyle(0, BLACK);

	 bar(30, getmaxy()/2 + 80, getmaxx() - 60, getmaxy()/2 + 140);

	 line(50, getmaxy()/2 + 120, getmaxx() - 100, getmaxy()/2 + 120);
	 line(50, getmaxy()/2 + 120, 50, getmaxy() - 40);
	 outtextxy(50, getmaxy()/2 + 120, "Invalid option given");
	 line(getmaxx() - 100, getmaxy()/2 +120, getmaxx() - 100, getmaxy() - 40);
	 line(50, getmaxy() - 40, getmaxx() - 100, getmaxy() - 40);

	 repeat = 0;
	 delay(1000);
	 main_menu();
  }
}

// Intro window.

void intro()
{
  int gd=DETECT, gm, i, j, color=0;

  // Autodetect
  // Initializing the graphics driver as well as mode.

  initgraph(&gd, &gm, "../bgi");

  cleardevice();

  // Boundary

   line(0, 30, getmaxx(), 30);
  line(getmaxx(), 30, getmaxx(), getmaxy()/2+170);
  line(0, 30, 0, getmaxy()/2+170);
  line(0, getmaxy()/2+170, getmaxx(), getmaxy()/2+170);



  settextstyle(6, 0, 8);

  for(i=-180,j=getmaxx()+30;i<=getmaxx()+40;i++,j--)
  {
	outtextxy(i, getmaxy()/2-80, "Welcome");

	outtextxy(j, getmaxy()/2, "To");

	if(i>=getmaxx()/2-100 && i<=getmaxx()/2+40)
	delay(30);

	else
	delay(5);
	cleardevice();
  }
  settextstyle(7, 0, 8);

   for(i=-80; i<=80; i++)
   {
     setcolor(color);
     outtextxy(80, i, "Catch It");

     if(color>15)
	color=0;
     else
	color++;
     delay(35);
     cleardevice();
   }

   setcolor(getmaxcolor());

   outtextxy(80, 80, "Catch It");

  settextstyle(1, 0, 4);

  setcolor(RED);
  outtextxy(40, 300, "Press any key to continue...");

  getch();

  setfillstyle(0, BLACK);

  bar(40, 300, getmaxx(), 340);

  setcolor(GREEN);

  // Loading bar and text.

  outtextxy(40, 300, "Loading...");

  setfillstyle(4, BLUE);

  for(i=90; i<=getmaxx()-80; i++)
  {
   bar(80, 360, i, 390);
   delay(5);
  }

 // cleardevice();

  main_menu();

  //game_play();
}

void main()
{
  intro();
 // game_play();

}